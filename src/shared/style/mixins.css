/* Transition helpers */
@define-mixin transition-timings {
	--transition-duration: 150ms;
	--transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

@define-mixin transition-color {
	@mixin transition-timings;

	transition-property: color, background-color, border-color;
}

/* Dynamic border just means using an X% darker version of background as border */
@define-mixin border-dynamic $bg-color {
	/* Define variable in case we want to use inner shadow as border */
	--border-color: color-mix(
		in hsl,
		var(--border-dynamic-base) var(--border-dynamic-mix),
		$(bg-color)
	);

	border-color: var(--border-color);
}

/* Button States */
@define-mixin disabled-button-appearance {
	opacity: 0.5;
}

@define-mixin disabled-button {
	@mixin disabled-button-appearance;

	pointer-events: none;
}

@define-mixin with-disabled-button {
	&:disabled,
	&[aria-disabled='true'] {
		@mixin disabled-button;
	}
}

/* Input States */
@define-mixin disabled-input {
	cursor: not-allowed;
	background-color: var(--input-disabled-bg);
}

@define-mixin with-disabled-input {
	&:disabled,
	&[aria-disabled='true'] {
		@mixin disabled-input;
	}
}

@define-mixin error-input {
	@mixin border-dynamic var(--danger);
}

@define-mixin with-error-input {
	&[aria-invalid='true'] {
		@mixin error-input;
	}
}

/* Focus States */
@define-mixin focus-ring {
	outline: var(--border-width-lg) solid var(--ring);
	outline-offset: var(--border-width-lg);
}

@define-mixin with-focus-ring {
	&:focus-visible {
		@mixin focus-ring;
	}
}

@define-mixin with-focus-ring-always {
	&:focus {
		@mixin focus-ring;
	}
}

/* Input Padding */
@define-mixin input-pad-sm {
	padding-left: calc((var(--input-height-sm) - var(--font-size-sm)) / 2);
	padding-right: calc((var(--input-height-sm) - var(--font-size-sm)) / 2);
	padding-top: calc((var(--input-height-sm) - var(--line-height-sm)) / 2);
	padding-bottom: calc((var(--input-height-sm) - var(--line-height-sm)) / 2);
}

@define-mixin input-pad-md {
	padding-left: calc((var(--input-height-md) - var(--font-size-md)) / 2);
	padding-right: calc((var(--input-height-md) - var(--font-size-md)) / 2);
	padding-top: calc((var(--input-height-md) - var(--line-height-md)) / 2);
	padding-bottom: calc((var(--input-height-md) - var(--line-height-md)) / 2);
}

@define-mixin input-pad-lg {
	padding-left: calc((var(--input-height-lg) - var(--font-size-lg)) / 2);
	padding-right: calc((var(--input-height-lg) - var(--font-size-lg)) / 2);
	padding-top: calc((var(--input-height-lg) - var(--line-height-lg)) / 2);
	padding-bottom: calc((var(--input-height-lg) - var(--line-height-lg)) / 2);
}

/* Input Sizes */
@define-mixin input-size-sm {
	@mixin input-pad-sm;

	font-size: var(--font-size-sm);
	line-height: var(--line-height-sm);
}

@define-mixin input-size-md {
	@mixin input-pad-md;

	font-size: var(--font-size-md);
	line-height: var(--line-height-md);
}

@define-mixin input-size-lg {
	@mixin input-pad-lg;

	font-size: var(--font-size-lg);
	line-height: var(--line-height-lg);
}

/* Hover styles */
@define-mixin hover-effect {
	filter: contrast(var(--contrast-hover)) saturate(var(--saturate-hover));
}

/* Link Styles */
@define-mixin link-style {
	color: var(--link);
	text-decoration-line: underline;
	text-underline-offset: var(--border-width-lg);

	&:hover {
		@mixin hover-effect;
	}

	&:focus-visible {
		text-decoration-style: double;
		outline: none;
	}
}
