/*
    Mixins for styling both generic elements and things we want to look like generic elements
*/

@define-mixin t-link-style {
	@mixin v-font-weight var(--v-font-weight-label);

	color: var(--v-link);
	text-decoration-line: underline;
	text-underline-offset: var(--v-underline-offset);

	&:hover {
		@mixin t-hover;
	}

	&:focus-visible {
		@mixin t-no-focus-ring;

		text-decoration-style: double;
	}
}

/* Button-like things */
@define-mixin t-button-style {
	@mixin o-input-box;
	@mixin t-overflow-x;
	@mixin t-transition single-arg(color, background-color, border-color, box-shadow);

	cursor: pointer;
	display: inline-flex;
	align-items: flex-start;
	justify-content: center;
	gap: var(--v-inline-gap);

	.lucide + * {
		text-align: left;
	}

	&:hover {
		@mixin t-hover;
	}

	&:disabled,
	&[aria-disabled='true'] {
		@mixin t-disabled-button;
	}

	&:focus-visible {
		@mixin t-focus-ring;
	}
}

/*
	Input-like things

	A bit more style than buttons because we usually hide inputs we don't want styled
	and use them for screenreader-only sort of things. Note that the combination of
	input colors + input box will automatically add a border because there's a default
	border style set for all elements in the reset.
*/
@define-mixin t-input-base-style {
	@mixin v-colors-input;
	@mixin o-input-box;
	@mixin t-radius-inner;
	@mixin t-overflow-x;

	box-shadow: var(--v-shadow-inner);
	min-height: var(--v-input-height);
}

/* When state in on input itself */
@define-mixin t-input-states {
	@mixin t-transition-color;

	&:disabled,
	&[aria-disabled='true'] {
		@mixin t-disabled-input;
	}

	&[aria-invalid='true'] {
		@mixin t-error;
	}

	&:focus {
		@mixin t-focus-ring;
	}
}

/* Convenience mixing base style + state */
@define-mixin t-input-style {
	@mixin t-input-base-style;
	@mixin t-input-states;
}

/* When state is on a wrapper */
@define-mixin t-input-wrapper-states {
	@mixin t-transition-color;

	&:focus-within {
		@mixin t-focus-ring;
	}

	&:has([aria-invalid='true']) {
		@mixin t-error;
	}

	&:has(:disabled, [aria-disabled='true']) {
		@mixin t-disabled-input;
	}
}

/* Convenience mixing base style + state */
@define-mixin t-input-wrapper-style {
	@mixin t-input-base-style;
	@mixin t-input-wrapper-states;
}

/* When state is on a sibling input preceding the target */
@define-mixin t-input-sibling-states {
	@mixin t-transition-color;

	:focus + & {
		@mixin t-focus-ring;
	}

	:disabled + &,
	[aria-disabled='true'] + & {
		@mixin t-disabled-input;
	}

	[aria-invalid='true'] + & {
		@mixin t-error;
	}
}
