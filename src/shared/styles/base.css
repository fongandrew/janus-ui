@import '~/shared/styles/common.css';

/* Defaults for a bunch of things */
@layer base {
	body {
		background: var(--v-body-bg, var(--v-bg));
		min-height: 100vh;

		/* So container queries can fallback to the body as a container */
		container-type: size;
		height: 100%;
		width: 100%;
		overflow: auto;
	}

	* {
		/*
			The input-box object assumes some sort of border for spacing. We don't want
			to automatically put a visible border on things without explicit indication
			though, so just make everything transparent for now.
		*/
		border-color: transparent;
	}

	a[href] {
		@mixin t-link-style;
	}

	b,
	strong {
		@mixin v-font-weight var(--v-font-weight-strong);
	}

	/*
		Truncate overflow on pretty much all text and inline elements by default.
		It's pretty annoying otherwise because every child needs the
		overflow set for the ellipsis treatment to work properly.
	*/
	a,
	aside,
	b,
	blockquote,
	em,
	h1,
	h2,
	h3,
	h4,
	h5,
	h6,
	p,
	span,
	strong {
		@mixin t-overflow-x;
	}

	/*
		Headings

		Because I need to periodically remind myself, don't stick multiple h1s on a page,
		even within a <section> or <article> or whatever. The outline algorithm that is
		supposed to reset headings for sections is not implemented in any browser:
		https://adrianroselli.com/2016/08/there-is-no-document-outline-algorithm.html

		h1 - At most 1, the page title (or site if this is the main hero page)
		h2 - Dialog, nav section headings
		h3 - Cards
		h4-h6 - Only used as alternatives to h1-h3 within self-contained section content

		header is assumed to constrain the heading, so basically reduce the size by 1 level
	*/

	/* At most 1, the page title (or site if this is the main hero page) */
	h1 {
		@mixin v-text-2xl;
		@mixin v-font-weight var(--v-font-weight-title);
	}

	/* h2 = top level  */
	header h1,
	h2 {
		@mixin v-text-xl;
		@mixin v-font-weight var(--v-font-weight-title);
	}

	/* Card headings basically */
	header h2,
	h3 {
		@mixin v-text-lg;
		@mixin v-font-weight var(--v-font-weight-subtitle);
	}

	/* Everything else */
	h4,
	h5,
	h6 {
		@mixin v-font-weight var(--v-font-weight-label);
	}

	/*
		Sectioning content - Maybe this is user generated content and we want to display
		this stuff in a certain way
	*/
	article,
	aside {
		h4 {
			@mixin v-text-xl;
			@mixin v-font-weight var(--v-font-weight-title);
		}

		h5 {
			@mixin v-text-lg;
			@mixin v-font-weight var(--v-font-weight-subtitle);
		}
	}

	blockquote,
	code,
	pre {
		@mixin t-radius-inner;
	}

	blockquote,
	pre {
		@mixin o-text-box;
	}

	code,
	pre {
		font-size: var(--v-font-size-sm);
		overflow: auto;
	}

	blockquote {
		@mixin v-colors-callout;
	}

	code {
		@mixin v-colors-code;

		padding: 0 var(--v-inner-radius);
	}

	pre {
		@mixin v-colors-pre;
	}

	ul,
	ol {
		padding-left: 1em;
	}

	/* input[type='file'] */
	input[type='file'] {
		cursor: pointer;

		&::file-selector-button {
			@mixin t-border;
			@mixin t-radius-inner;

			cursor: pointer;
			padding: 0 var(--v-inner-radius);
		}
	}

	/* Button-like things */
	button,
	input[type='button'],
	input[type='submit'],
	input[type='reset'] {
		&:not(.t-unstyled) {
			@mixin t-button-style;
		}
	}

	/* Input-like things */
	input:not([type='button'], [type='submit'], [type='reset'], [type='range']),
	textarea,
	select,
	[role='combobox'],
	[role='listbox'] {
		&:not(.t-unstyled) {
			@mixin t-input-style;
		}
	}

	/* Icons defaults */
	.lucide {
		height: 1lh;
		width: 1em;
		flex-shrink: 0;

		/*
			The !important is annoying but Lucide insists on setting a stroke width on the
			element itself and sometimes we want to override it.
		*/
		stroke-width: clamp(2, var(--v-font-weight) / 200, 3);
	}

	table {
		@mixin t-radius-inner;
		@mixin t-border;

		/* Define a single border color that doesn't shift because of table backdrops flipping */
		--v-table-border-color: var(--v-border-color);

		display: block;
		overflow: auto;
	}

	/* Cell styling */
	td,
	th {
		@mixin o-input-box;

		border: 0;
		width: 1%;
		overflow: hidden;
		text-overflow: ellipsis;
		vertical-align: top;
	}

	th {
		@mixin v-colors-secondary;
		@mixin v-font-weight var(--v-font-weight-label);

		text-align: left;
	}

	* + tbody,
	* + tr,
	* + tfoot {
		border-top: 1px solid var(--v-table-border-color);
	}

	tr:nth-child(even) {
		@mixin v-colors-secondary;

		&:last-child {
			border-bottom: 0;
		}
	}
}
