@import '~/shared/styles/common.css';

@layer components {
	.c-select__button {
		@mixin t-input-style;

		cursor: pointer;
		text-align: left;
		width: 100%;

		/* To avoid overlap with the chevron or clear */
		padding-right: var(--v-input-height);

		.c-select__container:has(:popover-open) & {
			@mixin t-focus-ring;
		}
	}

	.c-select__container:has(:invalid, [aria-invalid='true']) .c-select__button {
		@mixin t-error;
	}

	/* Select container parts */
	.c-select__container {
		position: relative;
	}

	.c-select__chevron,
	.c-select__clear {
		@mixin v-text-muted;

		position: absolute;
		inset-block: 0;
		right: 0;
		width: var(--v-input-height);
		display: flex;
		align-items: center;
		justify-content: center;
		border: 0;
		background-color: transparent;
		padding: 0;
	}

	.c-select__chevron {
		display: flex;
		pointer-events: none;
	}

	.c-select__clear {
		display: none;

		&:focus {
			@mixin t-radius-inner;
			@mixin t-focus-ring;
		}
	}

	/* Show clear button only is there's something to clear */
	.c-select__container:has(:checked, [type='hidden']):not(
			:has(.c-select__button[aria-disabled='true'], .c-select__button:disabled)
		)
		.c-select__clear {
		cursor: pointer;
		display: flex;
	}

	/* Hide chevron if clear button is shown */
	.c-select__container:has(.c-select__clear):has(:checked, [type='hidden']):not(
			:has(.c-select__button[aria-disabled='true'], .c-select__button:disabled)
		)
		.c-select__chevron {
		display: none;
	}

	.c-select__placeholder {
		@mixin v-text-muted;

		*:not(:empty) + & {
			display: none;
		}
	}

	[aria-busy='true'] .c-select__items {
		display: none;
	}

	/* Dropdown container, needs extra margin because of focus ring when */
	.c-select__dropdown {
		margin: calc(var(--v-space-xs) * 2) 0;

		/* Focus ring on button or input */
		[role='listbox']:focus {
			@mixin t-no-focus-ring;
		}
	}

	/* Select dropdown status / empty state */
	.c-select__status {
		@mixin v-text-sm;
		@mixin v-text-muted;
		@mixin t-overflow-x;

		display: none;
		width: 100%;
		overflow: hidden auto;
		padding: calc(var(--v-spacing) - var(--v-inner-radius)) var(--v-spacing);
		text-align: center;

		[aria-busy='true'] + &,
		[role='listbox']:has(.c-select__items[data-t-empty]) + & {
			display: block;
		}

		.c-select__no-match,
		.c-select__no-value,
		.c-select__busy {
			display: none;
		}

		/* Busy - hide empty state, show spinner */
		[aria-busy='true'] + & {
			.c-select__busy {
				display: block;
			}
		}

		/* Different empty states depending on whether there's input */
		:has(.c-select__items[data-t-empty]):not([aria-busy='true']) + & {
			.c-select__no-match:not(:has(.c-select__no-match-value[data-t-empty])) {
				display: block;
			}

			.c-select__no-match:has(.c-select__no-match-value[data-t-empty]) + .c-select__no-value {
				display: block;
			}
		}
	}

	/* Undo mobile-specific positioning, shift up to cover button */
	@mixin v-breakpoint-tablet {
		.c-select__input {
			position: absolute;
			left: 0;
			right: 0;

			[data-c-dropdown__position^='top'] & {
				bottom: 0;
				transform: translateY(100%);
			}

			[data-c-dropdown__position^='bottom'] & {
				top: 0;
				transform: translateY(-100%);
			}
		}
	}
}
