@import '~/shared/style/common.css';

@layer components {
	.c-select__button {
		@mixin t-input-style;

		cursor: pointer;
	}

	.c-select__input_description {
		@mixin t-input-base-style;
		@mixin t-input-sibling-states;

		pointer-events: none;
	}

	.c-select__button,
	.c-select__input_description {
		text-align: left;
		width: 100%;
	}

	.c-select__button,
	.c-select__input,
	.c-select__input_description {
		/* To avoid overlap with the chevron or clear */
		padding-right: var(--v-input-height);
	}

	/* Select container parts */
	.c-select__container {
		position: relative;
	}

	.c-select__chevron,
	.c-select__clear {
		position: absolute;
		inset-block: 0;
		right: 0;
		width: var(--v-input-height);
		display: flex;
		align-items: center;
		justify-content: center;
		border: 0;
		background-color: transparent;
		padding: 0;
		color: var(--v-muted);
	}

	.c-select__chevron {
		display: flex;
	}

	.c-select__clear {
		display: none;
	}

	/* Show clear button only is there's something to clear (and not required) */
	.c-select__container:has(+ [role='listbox'] [aria-checked='true']):not(
			:has([aria-required]:not([aria-required='false'])),
			:has(:required)
		)
		.c-select__clear {
		display: flex;
	}

	/* Hide chevron if clear button is shown */
	.c-select__container:has(+ [role='listbox'] [aria-checked='true']):not(
			:has([aria-required]:not([aria-required='false'])),
			:has(:required)
		)
		.c-select__chevron {
		display: none;
	}

	.c-select__placeholder {
		color: var(--v-muted);
	}

	/* Select dropdown empty state */
	.c-select__empty_state {
		@mixin v-text-sm;
		@mixin t-overflow-x;

		display: block;
		width: 100%;
		overflow: hidden auto;
		padding: calc(var(--v-spacing) - var(--v-inner-radius)) var(--v-spacing);
		text-align: center;
		color: var(--v-muted);
	}

	* + .c-select__empty_state {
		display: none;
	}

	/* Select typeahead */
	.c-select__input {
		position: absolute;
		inset: 0;
		opacity: 0;

		&:focus {
			opacity: 1;
		}
	}

	.c-select__container:has(:popover-open, :focus) .c-select__input {
		opacity: 1;
	}

	.c-select__container:has(:popover-open, :focus) .c-select__input_description {
		opacity: 0;
	}

	/* Mobile-specific fixed positioning for input + dropdown */
	.c-select__container:has(:popover-open) .c-select__input {
		position: fixed;
		inset: var(--v-spacing) var(--v-spacing) auto var(--v-spacing);
		z-index: var(--v-z-above-backdrop);
		width: auto;
	}

	.c-select__input ~ .c-dropdown__content {
		top: calc(var(--v-input-height) + 2 * var(--v-spacing));
		margin-top: 0;
		margin-bottom: 0;
		max-height: calc(100vh - 3 * var(--v-spacing) - var(--v-input-height));
	}

	/* Undo mobile-specific positioning */
	@mixin v-breakpoint-tablet {
		.c-select__container:has(:popover-open) .c-select__input {
			position: absolute;
			inset: 0;
			width: 100%;
		}

		.c-select__input ~ .c-dropdown__content {
			/* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */
			top: var(--c-dropdown__top);
			/* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */
			max-height: var(--c-dropdown__computed-max-height);
		}
	}
}
