@import '~/shared/styles/common.css';

@layer base {
	/* Stop scrolling when modal open */
	body:has(:modal) {
		overflow: hidden;
	}
}

@layer variables {
	:root {
		--c-modal__width: 32rem;
	}
}

@layer components {
	.c-modal {
		@mixin t-transition-fade-out;

		position: fixed;
		inset: 0;
		height: 100%;
		width: 100%;
		top: 0;
		left: 0;
		align-items: center;
		justify-content: center;
		background-color: var(--v-backdrop);
		backdrop-filter: blur(4px);
		z-index: var(--v-z-backdrop);

		/* Really just to unset. See https://til.simonwillison.net/css/dialog-full-height */
		max-height: 100dvh;
		max-width: 100vw;

		/* Display flex as soon as modal is active to support transitions */
		&[data-c-modal__active] {
			display: flex;
		}

		&:modal {
			@mixin t-transition-fade-in;

			/*
				Duplicates above in case we somehow get to modal state without having set
				[data-c-modal__active] first (e.g. future commandfor / no-js approach)
			*/
			display: flex;
		}
	}

	/* Fullscreen on mobile */
	.c-modal__body {
		@mixin v-colors-card;
		@mixin t-border;
		@mixin t-radius-outer;

		--c-modal__inset: var(--v-space-xs);

		inset: var(--c-modal__inset);
		position: fixed;
		display: flex;
		flex-direction: column;
		overflow: hidden;
		container-type: inline-size;
	}

	@mixin v-breakpoint-tablet {
		.c-modal__body {
			--c-modal__inset: var(--v-space-sm);

			inset: auto;
			position: relative;
			max-height: calc(100dvh - var(--c-modal__inset) * 2);
			max-width: 100%;
			width: var(--c-modal__width);
		}
	}

	@mixin v-breakpoint-tablet-wide {
		.c-modal__body {
			--c-modal__inset: var(--v-space-md);
		}
	}

	@mixin v-breakpoint-desktop {
		.c-modal__body {
			--c-modal__inset: var(--v-space-lg);
		}
	}

	.c-modal__header {
		@mixin o-group;
		@mixin o-text-box;

		align-items: center;
		flex: none;
	}

	.c-modal__content {
		@mixin o-box;

		position: relative;
		flex-grow: 1;
		overflow: auto;
	}

	* + .c-modal__content {
		padding-top: 0;
	}

	.c-modal__content:has(+ .c-modal__footer) {
		padding-bottom: var(--v-space-xs); /* Not zero -- leave some space for focus ring */
	}

	.c-modal__x {
		@mixin v-text-muted;
	}

	.c-modal__content:not([data-c-scroll__top]) {
		box-shadow: var(--v-shadow-inner-top);
	}

	.c-modal__content:not([data-c-scroll__bottom]):has(+ .c-modal__footer) {
		box-shadow: var(--v-shadow-inner-bottom);
	}

	.c-modal__content:not([data-c-scroll__top], [data-c-scroll__bottom]):has(+ .c-modal__footer) {
		box-shadow: var(--v-shadow-inner-top), var(--v-shadow-inner-bottom);
	}

	.c-modal__title {
		@mixin v-text-xl;
		@mixin v-font-weight var(--v-font-weight-title);

		flex-grow: 1;
	}

	.c-modal__footer {
		@mixin o-box;

		display: flex;
		flex: none;
		align-items: center;
		justify-content: flex-end;
		gap: var(--v-inline-gap);
	}
}
